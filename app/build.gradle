/*
 * Copyright (c) 2025 by David Gerber - https://zapek.com
 *
 * This file is part of Xeres.
 *
 * Xeres is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Xeres is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Xeres.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.panteleyev.jpackage.ImageType
import org.springframework.boot.gradle.plugin.SpringBootPlugin


plugins {
    id 'org.springframework.boot'
    id 'org.flywaydb.flyway'
    id 'org.panteleyev.jpackageplugin'
}

flyway {
    url = "jdbc:h2:file:${project.rootDir}/data/userdata"
    user = 'sa'
}

tasks.register('cleanLibs', Delete) {
    delete layout.buildDirectory.dir("libs")
}

bootJar {
    dependsOn cleanLibs
    manifest {
        attributes 'Implementation-Version': "${project.version}"
        attributes 'Implementation-Title': "${project.name}"
    }
}

bootRun {
    bootRun.jvmArgs "-ea", "-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"
    bootRun.systemProperty 'spring.profiles.active', 'dev'
}

springBoot {
    buildInfo {
        excludes = ['time'] // make the build repeatable
        properties {
            name = rootProject.name
        }
    }
}

test {
    useJUnitPlatform()
    test.jvmArgs "-ea", "-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"
}

tasks.register('copyInstaller', Copy) {
    dependsOn cleanLibs
    from layout.settingsDirectory.dir("installer")
    into layout.buildDirectory.dir("libs")
}

bootBuildImage {
    // Don't forget to set the image platform, for example: -Dimage.platform=linux-x86_64 or -Dimage.platform=linux-aarch_64
    imageName = "zapek/${rootProject.name.toLowerCase(Locale.ROOT)}:${project.version}"
}

tasks.register('deletePortable', Delete) {
    delete layout.buildDirectory.dir("distributions").get().dir(rootProject.name)
}

tasks.register('createPortableFile') {
    notCompatibleWithConfigurationCache("Uses execution-time configuration filtering")
    doLast {
        def portable = new File("${layout.buildDirectory.dir("distributions").get().dir(rootProject.name)}", "Portable")
        if (!portable.getParentFile().exists()) {
            portable.getParentFile().mkdirs()
        }
        portable.createNewFile()
    }
}

tasks.register('packagePortable', Zip) {
    dependsOn createPortableFile
    finalizedBy deletePortable
    archiveFileName = "${rootProject.name}-${project.version}-portable.zip"
    destinationDirectory = layout.buildDirectory.dir("distributions")
    from layout.buildDirectory.dir("distributions").get().dir(rootProject.name)
}

jpackage {
    dependsOn bootJar, copyInstaller
    finalizedBy packagePortable
    appName = parent.project.name
    appVersion = "${project.version}".split("-")[0]
    vendor = "David Gerber"
    copyright = "Copyright 2019-2025 by David Gerber. All Rights Reserved"
    appDescription = parent.project.name
    input = layout.buildDirectory.dir("libs")
    destination = layout.buildDirectory.dir("distributions")
    mainJar = tasks.bootJar.archiveFileName.get()
    if (project.hasProperty("jpackage.portable")) {
        type = ImageType.APP_IMAGE
    } else {
        licenseFile = layout.settingsDirectory.file("LICENSE")
        aboutUrl = "https://xeres.io"
    }
    // Do not supply files relative to currentDir. It can change depending on how the executable is started
    javaOptions = ['-Djava.net.preferIPv4Stack=true',
                   '-Dfile.encoding=UTF-8',
                   '-splash:$APPDIR/startup.png',
                   '-Xms256m',
                   '-Xmx1024m',
                   '-XX:MaxMetaspaceSize=256m',
                   '-XX:+UseCompactObjectHeaders',
                   '-Dvisualvm.display.name=Xeres',
                   '-Dlogging.file.name=$APPDIR/xeres.log',
                   '-Dlogging.logback.rollingpolicy.clean-history-on-start=true',
                   '-Dlogging.logback.rollingpolicy.max-file-size=20MB',
                   '-Dlogging.logback.rollingpolicy.max-history=3',
                   '-Dspring.output.ansi.enabled=never']
    windows {
        if (!project.hasProperty("jpackage.portable")) {
            type = ImageType.MSI
            winMenu = true
            winPerUserInstall = true
            winDirChooser = true
            winMenuGroup = parent.project.name
            winUpgradeUuid = "97a4aaa5-0a3f-47f9-b0a2-f91876d9e7dd"
        }
        icon = layout.settingsDirectory.file("icon.ico")
    }
    linux {
        if (project.hasProperty("jpackage.rpm")) {
            type = ImageType.RPM
        }
        linuxShortcut = true
        icon = layout.settingsDirectory.file("icon.png")
    }
    mac {
        icon = layout.settingsDirectory.file("icon.icns")
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
}

javadoc {
    options.overview = "src/main/javadoc/overview.html"
}

dependencies {
    implementation(platform(SpringBootPlugin.BOM_COORDINATES))
    annotationProcessor(platform(SpringBootPlugin.BOM_COORDINATES))
    developmentOnly(platform(SpringBootPlugin.BOM_COORDINATES))
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor' // handles @ConfigurationProperties
    implementation project(':common')
    implementation project(':ui')
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation('org.springframework.boot:spring-boot-starter-webflux') { // to bring in netty
        exclude group: 'io.netty', module: 'netty-transport-native-epoll'
    }
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-messaging' // seems to be missing from spring-boot-starter-security
    implementation "org.flywaydb:flyway-core"
    implementation "org.bouncycastle:bcpg-jdk18on:$bouncycastleVersion" // use bcpg-debug-jdk18on for debugger support
    implementation "org.bouncycastle:bcpkix-jdk18on:$bouncycastleVersion" // use bcpkix-debug-jkd18on for debugger support
    implementation "org.jsoup:jsoup:$jsoupVersion"
    implementation 'com.github.atomashpolskiy:bt-dht:1.10'
    implementation "org.apache.commons:commons-lang3:$apacheCommonsLangVersion"
    implementation "org.apache.commons:commons-collections4:$apacheCommonsCollectionsVersion"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:$springOpenApiVersion"
    implementation 'net.coobird:thumbnailator:0.4.20'
    implementation "net.java.dev.jna:jna-platform:$jnaVersion"
    implementation "com.github.java-json-tools:json-patch:$jsonPatchVersion"
    implementation 'com.maxmind.geoip2:geoip2:4.4.0'
    implementation "com.google.zxing:javase:$zxingVersion"
    implementation 'com.sangupta:bloomfilter:0.9.0'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springOpenApiVersion"
    implementation "org.commonmark:commonmark:$commonMarkVersion"
    implementation "org.commonmark:commonmark-ext-gfm-strikethrough:$commonMarkVersion"
    implementation "org.graalvm.polyglot:polyglot:$graalvmVersion"
    implementation "org.graalvm.polyglot:js:$graalvmVersion"
    developmentOnly 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation(testFixtures(project(":common")))
    testImplementation "com.tngtech.archunit:archunit-junit5:$archunitVersion"
}
