import org.panteleyev.jpackage.ImageType

/*
 * Copyright (c) 2019-2023 by David Gerber - https://zapek.com
 *
 * This file is part of Xeres.
 *
 * Xeres is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Xeres is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Xeres.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
    def osArch = System.getProperty('os.arch')
    def imagePlatform = System.getProperty('image.platform')
    if (imagePlatform != null) {
        ext.tcnative_classifier = imagePlatform
    } else if (osName.contains('win')) {
        if (osArch != 'amd64') {
            throw new GradleException("Only x86_64 is supported on Windows, you're using $osArch")
        }
        ext.tcnative_classifier = 'windows-x86_64'
    } else if (osName.contains('linux')) {
        if (osArch == 'amd64') {
            ext.tcnative_classifier = 'linux-x86_64'
        } else if (osArch == 'aarch64') {
            ext.tcnative_classifier = 'linux-aarch_64'
        } else {
            throw new GradleException("Only x86_64 or ARM64 is supported on Linux, you're using $osArch")
        }
    } else if (osName.contains('mac')) {
        if (osArch == 'x86_64') {
            ext.tcnative_classifier = 'osx-x86_64'
        } else if (osArch == 'aarch64') {
            ext.tcnative_classifier = 'osx-aarch_64'
        } else {
            throw new GradleException("Only x86_64 or ARM64 is supported on SteveJobsOS, you're using $osArch")
        }
    } else {
        throw new GradleException("Only Windows (x86_64), Linux (x86_64, ARM64) and MacOS (x86_64, ARM64) are supported. You're using $osName ($osArch)")
    }
}

plugins {
    id 'org.springframework.boot'
    id 'org.flywaydb.flyway'
    id 'org.panteleyev.jpackageplugin'
}

flyway {
    url = "jdbc:h2:file:${project.rootDir}/data/userdata"
    user = 'sa'
}

bootJar {
    manifest {
        attributes 'Implementation-Version': "${project.version}"
        attributes 'Implementation-Title': "${project.name}"
    }
}

bootRun {
    bootRun.jvmArgs "-ea", "-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"
    bootRun.systemProperty 'spring.profiles.active', 'dev'
}

springBoot {
    buildInfo {
        excludes = ['time'] // make the build repeatable
        properties {
            name = rootProject.name
        }
    }
}

test {
    useJUnitPlatform()
    test.jvmArgs "-ea", "-Djava.net.preferIPv4Stack=true", "-Dfile.encoding=UTF-8"
}

tasks.register('copyInstaller', Copy) {
    from "${parent.rootDir}/installer"
    include "*"
    into "${project.buildDir}/${project.libsDirName}"
    doNotTrackState("Copying installation file need to re-run every time")
}

// needed to avoid duplicate jars in 'libs' when changing versions
tasks.register('deleteLibs', Delete) {
    delete "${project.buildDir}/${project.libsDirName}/"
}

bootBuildImage {
    // Don't forget to set the image platform, for example: -Dimage.platform=linux-x86_64 or -Dimage.platform=linux-aarch_64
    imageName = "zapek/${rootProject.name.toLowerCase(Locale.ROOT)}:${project.version}"
}

// This is needed to have jpackage work with the configuration cache, see https://github.com/petr-panteleyev/jpackage-gradle-plugin/issues/29
def jpackageWorkdir = layout.buildDirectory.file('jpackage')
tasks.register('cleanJpackageWorkdir', Delete) {
    delete jpackageWorkdir
}

tasks.register('deletePortable', Delete) {
    delete layout.buildDirectory.dir("dist/${rootProject.name}")
}

jpackage {
    dependsOn deleteLibs, cleanJpackageWorkdir
    mustRunAfter "deleteLibs"
    dependsOn "bootJar"
    dependsOn "copyInstaller"
    appName = parent.project.name
    vendor = "David Gerber"
    copyright = "Copyright 2019-2024 by David Gerber. All Rights Reserved"
    appDescription = parent.project.name
    input = "${project.buildDir}/${project.libsDirName}"
    destination = "${project.buildDir}/dist"
    mainJar = bootJar.archiveFileName.get()
    if (project.hasProperty("jpackage.portable")) {
        type = ImageType.APP_IMAGE
    } else {
        licenseFile = "${parent.rootDir}/LICENSE"
        aboutUrl = "https://xeres.io"
    }
    javaOptions = ['-Djava.net.preferIPv4Stack=true',
                   '-Dfile.encoding=UTF-8',
                   '-splash:$APPDIR/startup.jpg',
                   '-Dlogging.file.name=xeres.log',
                   '-Dlogging.logback.rollingpolicy.clean-history-on-start=true',
                   '-Dlogging.logback.rollingpolicy.max-file-size=1MB',
                   '-Dlogging.logback.rollingpolicy.max-history=3',
                   '-Dspring.output.ansi.enabled=never']
    windows {
        if (!project.hasProperty("jpackage.portable")) {
            type = ImageType.MSI
            winMenu = true
            winPerUserInstall = true
            winDirChooser = true
            winMenuGroup = parent.project.name
            winUpgradeUuid = "97a4aaa5-0a3f-47f9-b0a2-f91876d9e7dd"
        }
        icon = "${parent.rootDir}/icon.ico"
    }
    linux {
        if (project.hasProperty("jpackage.rpm")) {
            type = ImageType.RPM
        }
        linuxShortcut = true
        icon = "${parent.rootDir}/icon.png"
    }
    mac {
        appVersion = "6.6.6" // MacOS sucks, it wants no more than 3 numbers and the first one != 0
        icon = "${parent.rootDir}/icon.icns"
    }
    doLast {
        if (project.hasProperty("jpackage.portable")) {
            new File("${project.buildDir}/dist/${rootProject.name}", "Portable").text = ""
        }
    }
    finalizedBy("packagePortable", "deletePortable")
}

tasks.register('packagePortable', Zip) {
    archiveFileName = "${rootProject.name}-${project.version}-portable.zip"
    destinationDirectory = layout.buildDirectory.dir('dist')
    from layout.buildDirectory.dir("dist/${rootProject.name}")
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
}

dependencies {
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor' // handles @ConfigurationProperties
    implementation project(':common')
    implementation project(':ui')
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation('org.springframework.boot:spring-boot-starter-webflux') { // to bring in netty
        exclude group: 'io.netty', module: 'netty-transport-native-epoll'
    }
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-messaging' // seems to be missing from spring-boot-starter-security
    implementation "org.flywaydb:flyway-core"
    implementation "org.bouncycastle:bcpg-jdk18on:$bouncycastleVersion"
    implementation "org.bouncycastle:bcpkix-jdk18on:$bouncycastleVersion"
    implementation "org.jsoup:jsoup:$jsoupVersion"
    implementation "net.harawata:appdirs:$appDirsVersion"
    implementation 'com.github.atomashpolskiy:bt-dht:1.10'
    implementation 'org.apache.commons:commons-lang3'
    implementation "org.apache.commons:commons-collections4:$apacheCommonsCollectionsVersion"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:$springOpenApiVersion"
    implementation 'net.coobird:thumbnailator:0.4.20'
    implementation 'net.java.dev.jna:jna-platform:5.15.0'
    implementation "com.github.java-json-tools:json-patch:$jsonPatchVersion"
    implementation 'com.maxmind.geoip2:geoip2:4.2.1'
    implementation "com.google.zxing:javase:$zxingVersion"
    implementation 'com.sangupta:bloomfilter:0.9.0'
    implementation "io.netty:netty-tcnative-boringssl-static::$tcnative_classifier"
    developmentOnly 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springOpenApiVersion"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation(testFixtures(project(":common")))
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
}
