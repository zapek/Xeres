/*
 * Copyright (c) 2025 by David Gerber - https://zapek.com
 *
 * This file is part of Xeres.
 *
 * Xeres is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Xeres is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Xeres.  If not, see <http://www.gnu.org/licenses/>.
 */

package io.xeres.app.crypto.dh;

import io.xeres.common.util.SecureRandomUtils;

import javax.crypto.spec.DHParameterSpec;
import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;

public final class DiffieHellman
{
	private static final String KEY_ALGORITHM = "DH";

	// Those values are used by Retroshare (P is 2048 bits group, generated by OpenSSL)
	static final BigInteger P = new BigInteger("B3B86A844550486C7EA459FA468D3A8EFD71139593FE1C658BBEFA9B2FC0AD2628242C2CDC2F91F5B220ED29AAC271192A7374DFA28CDDCA70252F342D0821273940344A7A6A3CB70C7897A39864309F6CAC5C7EA18020EF882693CA2C12BB211B7BA8367D5A7C7252A5B5E840C9E8F081469EBA0B98BCC3F593A4D9C4D5DF539362084F1B9581316C1F80FDAD452FD56DBC6B8ED0775F596F7BB22A3FE2B4753764221528D33DB4140DE58083DB660E3E105123FC963BFF108AC3A268B7380FFA72005A1515C371287C5706FFA6062C9AC73A9B1A6AC842C2764CDACFC85556607E86611FDF486C222E4896CDF6908F239E177ACC641FCBFF72A758D1C10CBB", 16);
	static final BigInteger G = new BigInteger("5", 16);

	private DiffieHellman()
	{
		throw new UnsupportedOperationException("Utility class");
	}

	public static KeyPair generateKeys()
	{
		try
		{
			var keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);
			var dhParameterSpec = new DHParameterSpec(P, G);

			keyPairGenerator.initialize(dhParameterSpec, SecureRandomUtils.getGenerator());

			return keyPairGenerator.generateKeyPair();
		}
		catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException e)
		{
			throw new IllegalArgumentException("DH algorithm error: " + e.getMessage());
		}
	}
}
